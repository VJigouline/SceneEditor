digraph SceneEditor {
 // Interfaces.
 node [shape=record, fontname="Calibri italic", fontsize="14", style="filled", fillcolor="lightyellow", shape="record"];
 DialogData [label="{DialogData |
  title: string\n
  label: string\n
  message: string\n
 }"]
 DragEvent [label="{DragEvent |
  object: THREE.Object3D\n
  target: DragControls\n
  type: string
 }"]
 DraggingChangedEvent [label="{DraggingChangedEvent |
  target: TransformControls\n
  type: string\n
  value: boolean
 }"]
 ViewerFile [label="{ViewerFile extends File |
  relativePath: string\n
  reader: CompoundReader\n
  contentSetter: ContentSetter\n
  service: ThreeSceneService
 }"]
 File

 // Classes.
 node [fontname="Calibri", fillcolor="white"];
 DirectionalLight [label="{DirectionalLight |
   constructor()\n
   clone(): DirectionalLight
   |
   castShadow: boolean
 }"]
 DirectionalLightHelper [label="{DirectionalLightHelper |
   constructor(light: THREE.DirectionalLight)\n
   update(light: THREE.DirectionalLight): void
   |
   light: THREE.DirectionalLight\n
   positionSphere: THREE.Mesh\n
   targetSphere: THREE.Mesh
 }"]
  HemisphereLight [label="{HemisphereLight |
    constructor()\n
    clone(): HemisphereLight
    |
    groundColour: string\n
    castShadow: boolean
  }"]
 HemisphereLightHelper [label="{HemisphereLightHelper |
   constructor(light: THREE.HemisphereLight)\n
   update(light: THREE.HemisphereLight): void
   |
   light: THREE.HemisphereLight\n
   positionSphere: THREE.Mesh
 }"]
 Light [label="{Light |
   constructor(type: LightType)\n
   static CreateLight(light: THREE.Light): Light\n
   clone(): Light\n
   copy(light: Light): void\n
   toJSON(): LightExport
   |
    name: string\n
    intensity: number\n
    type: LightType\n
    light: THREE.Light\n
    colour: string\n
    position: Point3\n
    target: Point3
 }"]
 Lights [label="{Lights |
    clone(): Lights
   |
    name: string\n
    lights: Array\<Light\>
 }"]
 LightsLibrary [label="{LightsLibrary |
    clear(): void\n
    clone(): LightsLibrary
    |
    name: string\n
    lights: Lights[]
 }"]
 MaterialLibrary [label="{MaterialLibrary |
   constructor(name: string, description: string)\n
   addFromScene(scene: THREE.Scene): void\n
   clone(): MaterialLibrary 
   |
    name: string;\n
    description: string;\n
    materials: Material[] = [];
 }"]
 Material  [label="{Material |
   constructor(type: MaterialType)\n
   static create(mat: THREE.Material): Material\n
   clone(): Material
   |
    alphaTest = 0\n
    blendDst = THREE.OneMinusSrcAlphaFactor\n
    blendDstAlpha: number\n
    blendEquation = THREE.AddEquation\n
    blendEquationAlpha: number\n
    blending = THREE.NormalBlending\n
    blendSrc: number = THREE.SrcAlphaFactor\n
    blendSrcAlpha: number\n
    clipIntersection = false\n
    clippingPlanes: THREE.Plane[]\n
    clipShadows = true\n
    colourWrite = true\n
    depthFunc = THREE.LessEqualDepth\n
    depthTest = true\n
    depthWrite = true\n
    stencilWrite = false\n
    stencilMask = 0xFF\n
    stencilFunc = THREE.AlwaysStencilFunc\n
    stencilRef = 0\n
    stencilFail = THREE.KeepStencilOp\n
    stencilZFail = THREE.KeepStencilOp\n
    stencilZPass = THREE.KeepStencilOp\n
    flatShading = false\n
    fog = true\n
    name = ''\n
    opacity = 1\n
    polygonOffset = false\n
    polygonOffsetFactor = 0\n
    polygonOffsetUnits = 0\n
    precision: string\n
    premultipliedAlpha = false\n
    dithering = false\n
    side = THREE.FrontSide\n
    toneMapped = true\n
    transparent = false\n
    vertexColors = THREE.NoColors\n
    vertexTangents = false\n
    visible = true\n
\n
    linewidth = 1\n
    dashSize = 3\n
    gapSize = 1\n
    scale = 1\n
    type: MaterialType\n
    colour: string\n
    specular: string\n
    emissive: string\n
    shininess: number\n
\n
    alphaMap: THREE.Texture\n
    aoMap: THREE.Texture\n
    aoMapIntensity = 1\n
    bumpMap: THREE.Texture\n
    bumpScale = 1\n
    combine: number\n
    emissiveMap: THREE.Texture\n
    emissiveIntensity = 1\n
    envMap: THREE.Texture\n
    envMapIntensity = 1\n
    lightMap: THREE.Texture\n
    lightMapIntensity = 1\n
    map: THREE.Texture\n
    metalness = 0.5\n
    metallnesMap: THREE.Texture\n
    morphNormals = false\n
    morphTargets = false\n
    normalMap: THREE.Texture\n
    normalMapType = THREE.TangentSpaceNormalMap\n
    normalScale = new THREE.Vector2(1, 1)\n
    reflectivity = 1\n
    refractionRatio = 0.98\n
    roughness = 0.5\n
    roughnessMap: THREE.Texture\n
    skinning = false\n
    specularMap: THREE.Texture\n
    wireframe = false\n
    // wireframeLineWidth = 1\n
    depthPacking = THREE.BasicDepthPacking\n
    displacementMap: THREE.Texture\n
    displacementScale = 1\n
    displacementBias = 0\n
\n
    // availability.\n
    hasLineWidth = false\n
    hasDashSize = false\n
    hasGapSize = false\n
    hasScale = false\n
    hasColour = false\n
    hasSpecular = false\n
    hasEmissive = false\n
    hasShininess = false\n
    hasAlphaMap = false\n
    hasAoMap = false\n
    hasAoMapIntensity = false\n
    hasBumpMap = false\n
    hasBumpScale = false\n
    hasCombine = false\n
    hasEmissiveMap = false\n
    hasEmissiveIntensity = false\n
    hasEnvMap = false\n
    hasEnvMapIntensity = false\n
    hasLightMap = false\n
    hasLightMapIntensity = false\n
    hasMap = false\n
    hasMetalness = false\n
    hasMetalnessMap = false\n
    hasMorphNormals = false\n
    hasMorphTargets = false\n
    hasNormalMap = false\n
    hasNormalMapType = false\n
    hasNormalScale = false\n
    hasReflectivity = false\n
    hasRefractionRatio = false\n
    hasRoughness = false\n
    hasRoughnessMap = false\n
    hasSkinning = false\n
    hasSpecularMap = false\n
    hasWireframe = false\n
    hasDepthPacking = false\n
    hasDisplacementMap = false\n
    hasDisplacementScale = false\n
    hasDisplacementBias = false\n
\n
    // ThreeJS material\n
    material: THREE.Material\n
 }"]
  Point3 [label="{Point3 |
    constructor(x: number, y: number, z: number)
    |
    X: number\n
    Y: number\n
    Z: number\n
  }"]
  PointLight [label="{PointLight |
    constructor()\n
    clone(): PointLight
    |
    castShadow: boolean\n
    decay: number\n
    distance: number\n
    power: number
  }"]
 PointLightHelper [label="{PointLightHelper |
   constructor(light: THREE.PointLight)\n
   update(light: THREE.PointLight): void
   |
   light: THREE.PointLight\n
   positionSphere: THREE.Mesh
 }"]
  SpotLight [label="{SpotLight |
    constructor()\n
    clone(): SpotLight\n
    copy(light: SpotLight): void
    |
    castShadow: boolean\n
    angle: number\n
    decay: number\n
    distance: number\n
    penumbra: number\n
    power: number
  }"]
 SpotLightHelper [label="{SpotLightHelper |
   constructor(light: THREE.SpotLight)\n
   update(light: THREE.SpotLight): void
   |
   light: THREE.SpotLight\n
   positionSphere: THREE.Mesh\n
   targetSphere: THREE.Mesh
 }"]

 // Template classes.
 node [fontname="Calibri", fillcolor="lightyellow"];
 
 // Enumerators.
 node [fontname="Calibri", fillcolor="plum1"];
 LightType [label="{LightType |
    AMBIENT = 'Ambient'\n
    DIRECTIONAL = 'Directional'\n
    HEMISPHERE = 'Hemisphere'\n
    POINT = 'Point'\n
    RECT_AREA = 'Rectangular Area'\n
    SPOT = 'Spot'
 }"]
 MaterialType [label="{MaterialType |
    LINE_BASIC = 'Line Basic'\n
    LINE_DASHED = 'Line Dashed'\n
    MESH_BASIC = 'Mesh Basic'\n
    MESH_DEPTH = 'Mesh Depth'\n
    MESH_DISTANCE = 'Mesh Distance'\n
    MESH_LAMBERT = 'Mesh Lambert'\n
    MESH_MATCAP = 'Mesh Matcap'\n
    MESH_NORMAL = 'Mesh Normal'\n
    MESH_PHONG = 'Mesh Phong'\n
    MESH_PHISICAL = 'Mesh Phisical'\n
    MESH_STANDARD = 'Mesh Standard'\n
    MESH_TOON = 'Mesh Toon'\n
    POINTS = 'Mesh Points'\n
    SHADOW = 'Shadow'\n
    SPRITE = 'Sprite'
 }"]
 ExportFileType [label="{ExportFileType |
    GLTF = 'gltf'\n
    THREE_SCENE = 'three'
 }"]

 // External classes.
 node [fillcolor="green"];
 DRACOLoader
 DragControls
 GLTFLoader
 OrbitControls
 STLLoader
 ThreeLight [label="Three.Light"]
 ThreeScene [label="Three.Scene"]
 TransformControls

 // Components
 node [fillcolor="lightblue"]
 AmbientLightEditorComponent [label="{AmbientLightEditorComponent |
   constructor()\n
   ngOnInit()\n
   onColourChanged(colour: string): void
   |
   @Output() lightChange: Light\n
   @Input() Light: Light\n
   Colour: string
}"]
 ConfirmationDialogComponent [label="{ConfirmationDialogComponent |
   constructor(public dialogRef: MatDialogRef\<ConfirmationDialogComponent\>,\n
    @Inject(MAT_DIALOG_DATA) public data: DialogData)\n
   ngOnInit()
   |
}"]
 DirectionalLightEditorComponent [label="{DirectionalLightEditorComponent |
   constructor()\n
   ngOnInit()\n
   onChange(event: MatCheckboxChange): void\n
   onColourChanged(colour: string): void\n
   onPositionChange(position: Point3): void\n
   onTargetChange(position: Point3): void\n
   onShadowChange(event: MatCheckboxChange): void
   |
   @Output() lightChange: Light\n
   @Input() Light: DirectionalLight
}"]
 ErrorDialogComponent [label="{ErrorDialogComponent |
   constructor(public dialogRef: MatDialogRef\<ErrorDialogComponent\>,\n
    @Inject(MAT_DIALOG_DATA) public data: DialogData)\n
   ngOnInit()
   |
}"]
 HemisphereLightEditorComponent [label="{HemisphereLightEditorComponent |
   constructor()\n
   ngOnInit()\n
   onColourChanged(colour: string): void\n
   onGroundColourChanged(colour: string): void\n
   onPositionChange(position: Point3): void\n
   onShadowChange(event: MatCheckboxChange): void
   |
   @Output() lightChange: Light\n
   @Input() Light: PointLight
}"]
 LightEditorComponent [label="{LightEditorComponent |
   constructor(private sceneService: ThreeSceneService,\n
   private confirmationDialog: MatDialog,\n
   private libraryService: LightsLibraryService)\n
   ngOnInit()\n
   onIntensityChanged(event: MatSliderChange): void\n
   onLightChanged(event: Light): void
   onNewLight(type: LightType): void\n
   onDelete(): void\n
   onSave()\n
   onSaveAll()\n
   onNew()\n
   onLoad()\n
   onSelectionChange(change: MatSelectChange): void\n
   unsetLightHelper(): void\n
   updateSelection(): void
   |
   @Output() newLight: Light\n
   @Output() changedLight: Light\n
   lightType: typeof LightType\n
   Lights: Lights\n
   Light: Light\n
   maxIntensity: number\n
}"]
 LightsLibraryEditorComponent [label="{LightsLibraryEditorComponent |
   constructor(
      private libraryService: LightsLibraryService,\n
      private confirmationDialog: MatDialog,\n
      private sceneService: ThreeSceneService   
   )\n
   ngOnInit()\n
   onClear(): void\n
   onImport(event: any): void\n
   onLightChanged(light: Light): void\n
   onNew(): void\n
   onSave(): void\n
   onSelectedTabChange(index: number)\n
   onSelectionChange(change: MatSelectChange): void
   |
   @Output() changedLight: Light\n
   Library: LightsLibrary\n
   Light: Light\n
   Lights: Lights
}"]
 MaterialEditorComponent [label="{MaterialEditorComponent |
   constructor(private sceneService: ThreeSceneService)\n
   ngOnInit(): void\n
   onSubmit()\n
   getSceneJSON(): void\n
   onDiffuseColourChanged(colour: string): void\n
   onEmissiveColourChanged(colour: string): void\n
   onSpecularColourChanged(colour: string): void\n
   onShininessChange(event: MatSliderChange): void\n
   onRoughnessChange(event: MatSliderChange): void\n
   onMetalnessChange(event: MatSliderChange): void
   |
  @Output() materialChange = new EventEmitter\<Material\>();\n
  sceneJSON: string;\n
  material = new Material(MaterialType.MESH_STANDARD);\n
}"]
 NewLightComponent [label="{NewLightComponent |
   constructor()\n
   ngOnInit()\n
   onNew(): void\n
   |
   lightType: LightType,
   lightTypes: Map\<LightType, string\>\n
}"]
 Point3DComponent [label="{Point3DComponent |
   constructor()\n
   ngOnInit()\n
   onChange(): void
   |
   @Output() changePoint: Point3\n
   @Input() Point: Point3\n
   @Input() Label:string\n
   @Input() enableX:boolean\n
   @Input() enableY:boolean\n
   @Input() enableZ:boolean\n   
   @Input() enableCheckboxes\n
   X:number\n
   Y:number\n
   Z:number\n
}"]
 PointLightEditorComponent [label="{PointLightEditorComponent |
   constructor()\n
   ngOnInit()\n
   onColourChanged(colour: string): void\n
   onDecayChanged(event: MatSliderChange): void\n
   onPositionChange(position: Point3): void\n
   onShadowChange(event: MatCheckboxChange): void
   |
   @Output() lightChange: Light\n
   @Input() Light: PointLight
}"]
 RectareaLightEditorComponent [label="{RectareaLightEditorComponent |
   constructor()\n
   ngOnInit()
}"]
 SceneComponent [label="{SceneComponent |
   constructor()\n
   ngOnInit()\n
   onSceneChange(op: string): void
   |
   @Output() sceneChanged = new EventEmitter\<string\>()
}"]
 SceneEditorComponent [label="{SceneEditorComponent |
   constructor(private sceneService: ThreeSceneService,
    private elRef: ElementRef)\n
   ngOnInit()\n
   private onResized(event: ResizedEvent): void\n
   ngAfterViewInit(): void\n
   onMaterialChange(material: Material)\n
   public dropped(files: NgxFileDropEntry[]\n
   public fileOver(event)\n
   public fileLeave(event)\n
   onSceneChange(op: string)\n
   public ResetScene(): void\n
   onLightChanged(light: Light): void\n
   onSelectedTabChange(event: MatTabChangeEvent): void
   |
   @Input() Width: number\n
   @Input() Height: number\n
   ViewHeight = 100\n
   ViewWidth = 100\n
   @ViewChild(\'ThreeJSView\', \{ static: false \}) private threeView: SceneViewComponent;\n
   @ViewChild('LightsLibraryEditor', \{ static: false \}) private lightsLirbaryEditor: LightsLibraryEditorComponent;\n
   @ViewChild('MaterialEditor', \{ static: false \}) private materialEditor: MaterialEditorComponent;
}"]
 SceneModifierComponent [label="{SceneModifierComponent |
   constructor(private sceneService: ThreeSceneService)\n
   ngOnInit()\n
   private onNewScene(): void\n
   private onAddToScene(): void\n
   private onUpdateScene(): void
   |
   @Output() sceneChanged = new EventEmitter\<string\>()
}"]
 SceneSaverComponent [label="{SceneSaverComponent |
   constructor(private sceneService: ThreeSceneService)\n
   ngOnInit()\n
   onSubmit()\n
   getSceneJSON(): void\n
   saveScene(gltf: any): void
   |
   message: string\n
   exportType = ExportFileType.GLTF
}"]
 SceneViewComponent [label="{SceneViewComponent |
   constructor(private sceneService: ThreeSceneService)\n
   ngOnInit()\n
   ngAfterViewInit()\n
   SetMaterial(material: Material)\n
   onOrbitControlChange(): void\n
   public Render(): void\n
   newScene(): void\n
   UpdateScene(): void
   |
   @ViewChild('container', \{ static: true \}) container: ElementRef\n
   @Input() AreaWidth: number\n
   @Input() AreaHeight: number\n
   sceneJSON: string\n
}"]
 SpotLightEditorComponent [label="{SpotLightEditorComponent |
   constructor()\n
   ngOnInit()\n
   onAngleChanged(event: MatSliderChange): void\n
   onColourChanged(colour: string): void\n
   onDecayChanged(event: MatSliderChange): void\n
   onPenumbraChanged(event: MatSliderChange): void\n
   onPositionChange(position: Point3): void\n
   onTargetChange(position: Point3): void\n
   onShadowChange(event: MatCheckboxChange): void
   |
   @Output() lightChange: Light\n
   @Input() Light: SpotLight
}"]
 AppComponent [label="{AppComponent |
   ngOnInit()\n
   |
   @HostListener('window:resize', []) onResize(): void
   |
  title: string;\n
  Width: number;\n
  Height: number;\n
}"]

 // Services
 node [fillcolor="sandybrown"]
 LightsLibraryService [label="{LightsLibraryService |
   constructor(private http: HttpClient,\n
   private errorDialog: MatDialog)\n
   getDefaultLibrary(): LightsLibrary\n
   importLibrary(library: LightsLibrary): void\n
   setCurrentLights(lights: Lights)
   |
   Library: LightsLibrary\n
   currentLights: Lights
 }"]
 MaterialService [label="{MaterialService |
   constructor()\n
 }"]
 MaterialLibraryService [label="{MaterialLibraryService |
   constructor()\n
   addLibrary(library: MaterialLibrary): void\n
   selectLibrary(index: number): void\n
   getNames(): MaterialLibrary[]\n
   getCurrentLibrary(): MaterialLibrary\n
   addNewLibrary(name: string, description: string): void\n
   addLibraryClone(library: MaterialLibrary): void
   |
   libraries: MaterialLibrary[];\n
   currentIndex = 0;
 }"]
 ThreeSceneService [label="{ThreeSceneService |
   constructor(private lightsLibraryService: LightsLibraryService)\n
   getScene(): THREE.Scene\n
   getNewScene(): THREE.Scene\n
   getSceneJSON(): string\n
   addFiles(files: NgxFileDropEntry[], finished: CallbackFinished): void\n
   addFile(file: NgxFileDropEntry, files: NgxFileDropEntry[], finished: CallbackFinished): void\n
   addGLTFFile(blob: ViewerFile, file: NgxFileDropEntry, files: NgxFileDropEntry[], scene: THREE.Scene, finished: CallbackFinished): void \n
   addJSONFile(blob: ViewerFile, file: NgxFileDropEntry, files: NgxFileDropEntry[], scene: THREE.Scene, finished: CallbackFinished): void\n
   addSTLFile(blob: ViewerFile, file: NgxFileDropEntry, files: NgxFileDropEntry[], scene: THREE.Scene, finished: CallbackFinished): void\n
   cancelHideTransform(): void\n
   delayHideTransform(): void\n
   getDragControl(objects: THREE.Object3D[]): DragControls\n
   setMaterial(material: THREE.Material): void\n
   getMaterial(): THREE.Material\n
   getLights(): Lights\n
   onDragHoveron(event: DragEvent): void\n
   onTransformDraggingChanged(event: DraggingChangedEvent): void\n
   removeObjectFromScene(object: THREE.Object3D): void\n
   resetLights(): void
   |
   camera: THREE.OrthographicCamera\n
   public orbitControls: OrbitControls\n
   renderer: THREE.WebGLRenderer\n
   transformControl: TransformControls
 }"]

 // Modules
 node [fillcolor="lightcyan"]
 AppRoutingModule [label="{AppRoutingModule |
   const routes: Routes = []
 }"]
 AppModule

 // Inheritance.
 node [fillcolor="white"];
 AmbientLightEditorComponent->Light
 ConfirmationDialogComponent->DialogData
 DirectionalLight->Light
 DirectionalLightEditorComponent->DirectionalLight
 DirectionalLightEditorComponent->Point3
 DirectionalLightEditorComponent->Point3DComponent
 ErrorDialogComponent->DialogData
 HemisphereLight->Light
 HemisphereLightEditorComponent->HemisphereLight
 Light->LightType
 Light->Point3
 Light->ThreeLight
 LightEditorComponent->AmbientLightEditorComponent
 LightEditorComponent->DirectionalLight
 LightEditorComponent->DirectionalLightEditorComponent
 LightEditorComponent->DirectionalLightHelper
 LightEditorComponent->DragControls
 LightEditorComponent->ConfirmationDialogComponent
 LightEditorComponent->HemisphereLight
 LightEditorComponent->HemisphereLightEditorComponent
 LightEditorComponent->HemisphereLightHelper
 LightEditorComponent->Light
 LightEditorComponent->Lights
 LightEditorComponent->LightsLibraryService
 LightEditorComponent->LightType
 LightEditorComponent->NewLightComponent
 LightEditorComponent->PointLight
 LightEditorComponent->PointLightEditorComponent
 LightEditorComponent->PointLightHelper
 LightEditorComponent->RectareaLightEditorComponent
 LightEditorComponent->SpotLight
 LightEditorComponent->SpotLightEditorComponent
 LightEditorComponent->SpotLightHelper
 LightEditorComponent->ThreeSceneService
 Lights->DirectionalLight
 Lights->HemisphereLight
 Lights->Light
 Lights->LightType
 Lights->PointLightEditorComponent
 Lights->SpotLight
 LightsLibrary->Lights
 LightsLibraryEditorComponent->ConfirmationDialogComponent
 LightsLibraryEditorComponent->ErrorDialogComponent
 LightsLibraryEditorComponent->Light
 LightsLibraryEditorComponent->Lights
 LightsLibraryEditorComponent->LightEditorComponent
 LightsLibraryEditorComponent->LightsLibrary
 LightsLibraryEditorComponent->LightsLibraryService
 LightsLibraryEditorComponent->ThreeSceneService
 LightsLibraryService->ErrorDialogComponent
 LightsLibraryService->Lights
 LightsLibraryService->LightsLibrary
 AppComponent->SceneEditorComponent
 AppModule->AppComponent
 MaterialLibraryService->MaterialLibrary
 MaterialLibrary->ThreeScene
 MaterialLibrary->Material
 Material->MaterialType
 MaterialService->Material
 MaterialEditorComponent->Material
 MaterialEditorComponent->ThreeSceneService
 Point3DComponent->Point3
 PointLight->Light
 PointLightEditorComponent->PointLight
 SceneComponent->SceneModifierComponent
 SceneComponent->SceneSaverComponent
 SceneEditorComponent->Light
 SceneEditorComponent->LightsLibraryEditorComponent
 SceneEditorComponent->MaterialEditorComponent
 SceneEditorComponent->SceneComponent
 SceneEditorComponent->SceneViewComponent
 SceneEditorComponent->ThreeSceneService
 SceneEditorComponent->Material
 SceneModifierComponent->ThreeSceneService
 SceneSaverComponent->ExportFileType
 SceneSaverComponent->ThreeSceneService
 SceneViewComponent->ThreeSceneService
 SceneViewComponent->Material
 SceneViewComponent->ThreeScene
 SceneViewComponent->TransformControls
 SpotLight->Light
 SpotLightEditorComponent->SpotLight
 ViewerFile->File
 ViewerFile->ThreeSceneService
 ThreeSceneService->DRACOLoader
 ThreeSceneService->DragControls
 ThreeSceneService->DragEvent
 ThreeSceneService->DraggingChangedEvent
 ThreeSceneService->GLTFLoader
 ThreeSceneService->Light
 ThreeSceneService->Lights
 ThreeSceneService->LightsLibraryService
 ThreeSceneService->LightType
 ThreeSceneService->OrbitControls
 ThreeSceneService->STLLoader
 ThreeSceneService->ThreeScene
 ThreeSceneService->TransformControls
 ThreeSceneService->ViewerFile
}